---
import { formatCurrency } from "../lib/format";
import type { Product } from "../types";

export interface Props {
  product: Product;
  page?: number;
  pageSize?: number;
  sort?: string;
  sortDir?: string;
  searchTerm?: string;
}

const {
  product,
  page = 1,
  pageSize = 10,
  sort = "id",
  sortDir = "asc",
  searchTerm = "",
} = Astro.props;

// Helper function to build URL with all table state
const buildEditUrl = (productId: number, field: string) => {
  const params = new URLSearchParams();
  if (page !== 1) params.set("page", page.toString());
  if (pageSize !== 10) params.set("limit", pageSize.toString());
  if (sort !== "id") params.set("sortBy", sort);
  if (sortDir !== "asc") params.set("sortOrder", sortDir);
  if (searchTerm) params.set("searchTerm", searchTerm);

  const queryString = params.toString();
  return `/api/products/${productId}/${field}${queryString ? "?" + queryString : ""}`;
};

// Helper function to build delete URL with all table state
const buildDeleteUrl = (productId: number) => {
  const params = new URLSearchParams();
  if (page !== 1) params.set("page", page.toString());
  if (pageSize !== 10) params.set("limit", pageSize.toString());
  if (sort !== "id") params.set("sortBy", sort);
  if (sortDir !== "asc") params.set("sortOrder", sortDir);
  if (searchTerm) params.set("searchTerm", searchTerm);

  const queryString = params.toString();
  return `/api/products/${productId}${queryString ? "?" + queryString : ""}`;
};

const subtotal = product.price * product.quantity;
---

<tr
  id={`row-${product.id}`}
  data-price={product.price}
  data-quantity={product.quantity}
>
  <td>{product.id}</td>
  <td>{product.name}</td>
  <td class="right">
    <span
      class="view"
      id={`view-price-${product.id}`}
      tabindex="0"
      aria-live="polite"
      aria-atomic="true"
      hx-on:click={`window.pageUtils.toggleEdit(${product.id}, true, 'price')`}
      onkeydown={`if(event.key==='Enter'||event.key===' '){window.pageUtils.toggleEdit(${product.id}, true, 'price');event.preventDefault();}`}
      >{formatCurrency(product.price)}</span
    >
    <span
      class="edit"
      class="edit hidden"
    >
      <input
        name="price"
        type="number"
        step="0.01"
        value={product.price}
        hx-patch={buildEditUrl(product.id, "price")}
        hx-target="#table-wrapper"
        hx-select="#table-wrapper"
        hx-swap="outerHTML"
        hx-push-url="false"
        hx-trigger="keyup[key=='Enter'] changed, blur changed"
        onkeydown="window.pageUtils.cancelOnEscape(event,this)"
        onkeyup="if(event.key==='Enter') window.pageUtils.handleEnterOptimistic(event,this)"
        onblur="window.pageUtils.handleBlurOptimistic(this)"
      />
    </span>
    <!-- Error target for price field -->
    <div
      id={`error-${product.id}-price`}
      class="error-container"
    >
    </div>
  </td>
  <td class="right">
    <span
      class="view"
      id={`view-qty-${product.id}`}
      tabindex="0"
      aria-live="polite"
      aria-atomic="true"
      hx-on:click={`window.pageUtils.toggleEdit(${product.id}, true, 'quantity')`}
      onkeydown={`if(event.key==='Enter'||event.key===' '){window.pageUtils.toggleEdit(${product.id}, true, 'quantity');event.preventDefault();}`}
      >{product.quantity}</span
    >
    <span
      class="edit"
      class="edit hidden"
    >
      <!-- Same error handling pattern as price field above -->
      <input
        name="quantity"
        type="number"
        step="1"
        value={product.quantity}
        hx-patch={buildEditUrl(product.id, "quantity")}
        hx-target="#table-wrapper"
        hx-select="#table-wrapper"
        hx-swap="outerHTML"
        hx-push-url="false"
        hx-trigger="keyup[key=='Enter'] changed, blur changed"
        onkeydown="window.pageUtils.cancelOnEscape(event,this)"
      />
    </span>
    <!-- Error target for quantity field -->
    <div
      id={`error-${product.id}-quantity`}
      class="error-container"
    >
    </div>
  </td>
  <td class="right">
    <span
      class="view"
      id={`view-sub-${product.id}`}
      >{formatCurrency(subtotal)}</span
    >
  </td>
  <td>
    <button
      class="btn btn-error btn-sm"
      hx-delete={buildDeleteUrl(product.id)}
      hx-target="#table-wrapper"
      hx-swap="outerHTML swap:500ms"
      hx-select="#table-wrapper"
      hx-on:click="this.closest('tr').classList.add('fade-out')"
    >
      Delete
    </button>
  </td>
</tr>
