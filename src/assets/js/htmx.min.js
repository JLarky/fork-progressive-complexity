(function (e, t) { if (typeof define === 'function' && define.amd) { define([], t); } else if (typeof module === 'object' && module.exports) { module.exports = t(); } else { e.htmx = e.htmx || t(); } })(typeof self !== 'undefined' ? self : this, function () { return (function () { 'use strict'; var Q = { onLoad: F, process: zt, on: de, off: ge, trigger: ce, ajax: Nr, find: C, findAll: f, closest: v, values: function (e, t) { var r = dr(e, t || 'post'); return r.values; }, remove: _, addClass: z, removeClass: n, toggleClass: $, takeClass: W, defineExtension: Ur, removeExtension: Br, logAll: V, logNone: j, logger: null, config: { historyEnabled: true, historyCacheSize: 10, refreshOnHistoryMiss: false, defaultSwapStyle: 'innerHTML', defaultSwapDelay: 0, defaultSettleDelay: 20, includeIndicatorStyles: true, indicatorClass: 'htmx-indicator', requestClass: 'htmx-request', addedClass: 'htmx-added', settlingClass: 'htmx-settling', swappingClass: 'htmx-swapping', allowEval: true, allowScriptTags: true, inlineScriptNonce: '', attributesToSettle: ['class', 'style', 'width', 'height'], withCredentials: false, timeout: 0, wsReconnectDelay: 'full-jitter', wsBinaryType: 'blob', disableSelector: '[hx-disable], [data-hx-disable]', useTemplateFragments: false, scrollBehavior: 'smooth', defaultFocusScroll: false, getCacheBusterParam: false, globalViewTransitions: false, methodsThatUseUrlParams: ['get'], selfRequestsOnly: false, ignoreTitle: false, scrollIntoViewOnBoost: true, triggerSpecsCache: null, }, parseInterval: d, _: t, createEventSource: function (e) { return new EventSource(e, { withCredentials: true }); }, createWebSocket: function (e) { var t = new WebSocket(e, []); t.binaryType = Q.config.wsBinaryType; return t; }, version: '1.9.12', }; var r = { addTriggerHandler: Lt, bodyContains: se, canAccessLocalStorage: U, findThisElement: xe, filterValues: yr, hasAttribute: o, getAttributeValue: te, getClosestAttributeValue: ne, getClosestMatch: c, getExpressionVars: Hr, getHeaders: xr, getInputValues: dr, getInternalData: ae, getSwapSpecification: wr, getTriggerSpecs: it, getTarget: ye, makeFragment: l, mergeObjects: le, makeSettleInfo: T, oobSwap: Ee, querySelectorExt: ue, selectAndSwap: je, settleImmediately: nr, shouldCancel: ut, triggerEvent: ce, triggerErrorEvent: fe, withExtensions: R, }; var w = ['get', 'post', 'put', 'delete', 'patch']; var i = w .map(function (e) { return '[hx-' + e + '], [data-hx-' + e + ']'; }) .join(', '); var S = e('head'), q = e('title'), H = e('svg', true); function e(e, t) { return new RegExp('<' + e + '(\\s[^>]*>|>)([\\s\\S]*?)<\\/' + e + '>', !!t ? 'gim' : 'im'); } function d(e) { if (e == undefined) { return undefined; } let t = NaN; if (e.slice(-2) == 'ms') { t = parseFloat(e.slice(0, -2)); } else if (e.slice(-1) == 's') { t = parseFloat(e.slice(0, -1)) * 1e3; } else if (e.slice(-1) == 'm') { t = parseFloat(e.slice(0, -1)) * 1e3 * 60; } else { t = parseFloat(e); } return isNaN(t) ? undefined : t; } function ee(e, t) { return e.getAttribute && e.getAttribute(t); } function o(e, t) { return e.hasAttribute && (e.hasAttribute(t) || e.hasAttribute('data-' + t)); } function te(e, t) { return ee(e, t) || ee(e, 'data-' + t); } function u(e) { return e.parentElement; } function re() { return document; } function c(e, t) { while (e && !t(e)) { e = u(e); } return e ? e : null; } function L(e, t, r) { var n = te(t, r); var i = te(t, 'hx-disinherit'); if (e !== t && i && (i === '*' || i.split(' ').indexOf(r) >= 0)) { return 'unset'; } else { return n; } } function ne(t, r) { var n = null; c(t, function (e) { return (n = L(t, e, r)); }); if (n !== 'unset') { return n; } } function h(e, t) { var r = e .matches || e.matchesSelector || e.msMatchesSelector || e.mozMatchesSelector || e.webkitMatchesSelector || e.oMatchesSelector; return r && r.call(e, t); } function A(e) { var t = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i; var r = t.exec(e); if (r) { return r[1].toLowerCase(); } else { return ''; } } function s(e, t) { var r = new DOMParser(); var n = r.parseFromString(e, 'text/html'); var i = n.body; while (t > 0) { t--; i = i.firstChild; } if (i == null) { i = re().createDocumentFragment(); } return i; } function N(e) { return /<body/.test(e); } function l(e) { var t = !N(e); var r = A(e); var n = e; if (r === 'head') { n = n.replace(S, ''); } if (Q.config.useTemplateFragments && t) { var i = s('<body><template>' + n + '</template></body>', 0); var a = i.querySelector('template').content; if (Q.config.allowScriptTags) { oe(a.querySelectorAll('script'), function (e) { if (Q.config.inlineScriptNonce) { e.nonce = Q.config.inlineScriptNonce; } e.htmxExecuted = navigator.userAgent.indexOf('Firefox') === -1; }); } else { oe(a.querySelectorAll('script'), function (e) { _(e); }); } return a; } switch (r) { case 'thead': case 'tbody': case 'tfoot': case 'colgroup': case 'caption': return s('<table>' + n + '</table>', 1); case 'col': return s('<table><colgroup>' + n + '</colgroup></table>', 2); case 'tr': return s('<table><tbody>' + n + '</tbody></table>', 2); case 'td': case 'th': return s('<table><tbody><tr>' + n + '</tr></tbody></table>', 3); case 'script': case 'style': return s('<div>' + n + '</div>', 1); default: return s(n, 0); } } function ie(e) { if (e) { e(); } } function I(e, t) { return Object.prototype.toString.call(e) === '[object ' + t + ']'; } function k(e) { return I(e, 'Function'); } function P(e) { return I(e, 'Object'); } function ae(e) { var t = 'htmx-internal-data'; var r = e[t]; if (!r) { r = e[t] = {}; } return r; } function M(e) { var t = []; if (e) { for (var r = 0; r < e.length; r++) { t.push(e[r]); } } return t; } function oe(e, t) { if (e) { for (var r = 0; r < e.length; r++) { t(e[r]); } } } function X(e) { var t = e.getBoundingClientRect(); var r = t.top; var n = t.bottom; return r < window.innerHeight && n >= 0; } function se(e) { if (e.getRootNode && e.getRootNode() instanceof window.ShadowRoot) { return re().body.contains(e.getRootNode().host); } else { return re().body.contains(e); } } function D(e) { return e.trim().split(/\s+/); } function le(e, t) { for (var r in t) { if (t.hasOwnProperty(r)) { e[r] = t[r]; } } return e; } function E(e) { try { return JSON.parse(e); } catch (e) { b(e); return null; } } function U() { var e = 'htmx:localStorageTest'; try { localStorage.setItem(e, e); localStorage.removeItem(e); return true; } catch (e) { return false; } } function B(t) { try { var e = new URL(t); if (e) { t = e.pathname + e.search; } if (!/^\/$/.test(t)) { t = t.replace(/\/+$/, ''); } return t; } catch (e) { return t; } } function t(e) { return Tr(re().body, function () { return eval(e); }); } function F(t) { var e = Q.on('htmx:load', function (e) { t(e.detail.elt); }); return e; } function V() { Q.logger = function (e, t, r) { if (console) { console.log(t, e, r); } }; } function j() { Q.logger = null; } function C(e, t) { if (t) { return e.querySelector(t); } else { return C(re(), e); } } function f(e, t) { if (t) { return e.querySelectorAll(t); } else { return f(re(), e); } } function _(e, t) { e = p(e); if (t) { setTimeout(function () { _(e); e = null; }, t); } else { e.parentElement.removeChild(e); } } function z(e, t, r) { e = p(e); if (r) { setTimeout(function () { z(e, t); e = null; }, r); } else { e.classList && e.classList.add(t); } } function n(e, t, r) { e = p(e); if (r) { setTimeout(function () { n(e, t); e = null; }, r); } else { if (e.classList) { e.classList.remove(t); if (e.classList.length === 0) { e.removeAttribute('class'); } } } } function $(e, t) { e = p(e); e.classList.toggle(t); } function W(e, t) { e = p(e); oe(e.parentElement.children, function (e) { n(e, t); }); z(e, t); } function v(e, t) { e = p(e); if (e.closest) { return e.closest(t); } else { do { if (e == null || h(e, t)) { return e; } } while ((e = e && u(e))); return null; } } function g(e, t) { return e.substring(0, t.length) === t; } function G(e, t) { return e.substring(e.length - t.length) === t; } function J(e) { var t = e.trim(); if (g(t, '<') && G(t, '/>')) { return t.substring(1, t.length - 2); } else { return t; } } function Z(e, t) { if (t.indexOf('closest ') === 0) { return [v(e, J(t.substr(8)))]; } else if (t.indexOf('find ') === 0) { return [C(e, J(t.substr(5)))]; } else if (t === 'next') { return [e.nextElementSibling]; } else if (t.indexOf('next ') === 0) { return [K(e, J(t.substr(5)))]; } else if (t === 'previous') { return [e.previousElementSibling]; } else if (t.indexOf('previous ') === 0) { return [Y(e, J(t.substr(9)))]; } else if (t === 'document') { return [document]; } else if (t === 'window') { return [window]; } else if (t === 'body') { return [document.body]; } else { return re().querySelectorAll(J(t)); } } var K = function (e, t) { var r = re().querySelectorAll(t); for (var n = 0; n < r.length; n++) { var i = r[n]; if (i.compareDocumentPosition(e) === Node.DOCUMENT_POSITION_PRECEDING) { return i; } } }; var Y = function (e, t) { var r = re().querySelectorAll(t); for (var n = r.length - 1; n >= 0; n--) { var i = r[n]; if (i.compareDocumentPosition(e) === Node.DOCUMENT_POSITION_FOLLOWING) { return i; } } }; function ue(e, t) { if (t) { return Z(e, t)[0]; } else { return Z(re().body, e)[0]; } } function p(e) { if (I(e, 'String')) { return C(e); } else { return e; } } function ve(e, t, r) { if (k(t)) { return { target: re().body, event: e, listener: t }; } else { return { target: p(e), event: t, listener: r }; } } function de(t, r, n) { jr(function () { var e = ve(t, r, n); e.target.addEventListener(e.event, e.listener); }); var e = k(r); return e ? r : n; } function ge(t, r, n) { jr(function () { var e = ve(t, r, n); e.target.removeEventListener(e.event, e.listener); }); return k(r) ? r : n; } var pe = re().createElement('output'); function me(e, t) { var r = ne(e, t); if (r) { if (r === 'this') { return [xe(e, t)]; } else { var n = Z(e, r); if (n.length === 0) { b('The selector "' + r + '" on ' + t + ' returned no matches!'); return [pe]; } else { return n; } } } } function xe(e, t) { return c(e, function (e) { return te(e, t) != null; }); } function ye(e) { var t = ne(e, 'hx-target'); if (t) { if (t === 'this') { return xe(e, 'hx-target'); } else { return ue(e, t); } } else { var r = ae(e); if (r.boosted) { return re().body; } else { return e; } } } function be(e) { var t = Q.config.attributesToSettle; for (var r = 0; r < t.length; r++) { if (e === t[r]) { return true; } } return false; } function we(t, r) { oe(t.attributes, function (e) { if (!r.hasAttribute(e.name) && be(e.name)) { t.removeAttribute(e.name); } }); oe(r.attributes, function (e) { if (be(e.name)) { t.setAttribute(e.name, e.value); } }); } function Se(e, t) { var r = Fr(t); for (var n = 0; n < r.length; n++) { var i = r[n]; try { if (i.isInlineSwap(e)) { return true; } } catch (e) { b(e); } } return e === 'outerHTML'; } function Ee(e, i, a) { var t = '#' + ee(i, 'id'); var o = 'outerHTML'; if (e === 'true') { } else if (e.indexOf(':') > 0) { o = e.substr(0, e.indexOf(':')); t = e.substr(e.indexOf(':') + 1, e.length); } else { o = e; } var r = re().querySelectorAll(t); if (r) { oe(r, function (e) { var t; var r = i.cloneNode(true); t = re().createDocumentFragment(); t.appendChild(r); if (!Se(o, e)) { t = r; } var n = { shouldSwap: true, target: e, fragment: t }; if (!ce(e, 'htmx:oobBeforeSwap', n)) return; e = n.target; if (n['shouldSwap']) { Fe(o, e, e, t, a); } oe(a.elts, function (e) { ce(e, 'htmx:oobAfterSwap', n); }); }); i.parentNode.removeChild(i); } else { i.parentNode.removeChild(i); fe(re().body, 'htmx:oobErrorNoTarget', { content: i }); } return e; } function Ce(e, t, r) { var n = ne(e, 'hx-select-oob'); if (n) { var i = n.split(','); for (var a = 0; a < i.length; a++) { var o = i[a].split(':', 2); var s = o[0].trim(); if (s.indexOf('#') === 0) { s = s.substring(1); } var l = o[1] || 'true'; var u = t.querySelector('#' + s); if (u) { Ee(l, u, r); } } } oe(f(t, '[hx-swap-oob], [data-hx-swap-oob]'), function (e) { var t = te(e, 'hx-swap-oob'); if (t != null) { Ee(t, e, r); } }); } function Re(e) { oe(f(e, '[hx-preserve], [data-hx-preserve]'), function (e) { var t = te(e, 'id'); var r = re().getElementById(t); if (r != null) { e.parentNode.replaceChild(r, e); } }); } function Te(o, e, s) { oe(e.querySelectorAll('[id]'), function (e) { var t = ee(e, 'id'); if (t && t.length > 0) { var r = t.replace("'", "\\'"); var n = e.tagName.replace(':', '\\:'); var i = o.querySelector(n + "[id='" + r + "']"); if (i && i !== o) { var a = e.cloneNode(); we(e, i); s.tasks.push(function () { we(e, a); }); } } }); } function Oe(e) { return function () { n(e, Q.config.addedClass); zt(e); Nt(e); qe(e); ce(e, 'htmx:load'); }; } function qe(e) { var t = '[autofocus]'; var r = h(e, t) ? e : e.querySelector(t); if (r != null) { r.focus(); } } function a(e, t, r, n) { Te(e, r, n); while (r.childNodes.length > 0) { var i = r.firstChild; z(i, Q.config.addedClass); e.insertBefore(i, t); if (i.nodeType !== Node.TEXT_NODE && i.nodeType !== Node.COMMENT_NODE) { n.tasks.push(Oe(i)); } } } function He(e, t) { var r = 0; while (r < e.length) { t = ((t << 5) - t + e.charCodeAt(r++)) | 0; } return t; } function Le(e) { var t = 0; if (e.attributes) { for (var r = 0; r < e.attributes.length; r++) { var n = e.attributes[r]; if (n.value) { t = He(n.name, t); t = He(n.value, t); } } } return t; } function Ae(e) { var t = ae(e); if (t.onHandlers) { for (var r = 0; r < t.onHandlers.length; r++) { const n = t.onHandlers[r]; e.removeEventListener(n.event, n.listener); } delete t.onHandlers; } } function Ne(e) { var t = ae(e); if (t.timeout) { clearTimeout(t.timeout); } if (t.webSocket) { t.webSocket.close(); } if (t.sseEventSource) { t.sseEventSource.close(); } if (t.listenerInfos) { oe(t.listenerInfos, function (e) { if (e.on) { e.on.removeEventListener(e.trigger, e.listener); } }); } Ae(e); oe(Object.keys(t), function (e) { delete t[e]; }); } function m(e) { ce(e, 'htmx:beforeCleanupElement'); Ne(e); if (e.children) { oe(e.children, function (e) { m(e); }); } } function Ie(t, e, r) { if (t.tagName === 'BODY') { return Ue(t, e, r); } else { var n; var i = t.previousSibling; a(u(t), t, e, r); if (i == null) { n = u(t).firstChild; } else { n = i.nextSibling; } r.elts = r.elts.filter(function (e) { return e != t; }); while (n && n !== t) { if (n.nodeType === Node.ELEMENT_NODE) { r.elts.push(n); } n = n.nextElementSibling; } m(t); u(t).removeChild(t); } } function ke(e, t, r) { return a(e, e.firstChild, t, r); } function Pe(e, t, r) { return a(u(e), e, t, r); } function Me(e, t, r) { return a(e, null, t, r); } function Xe(e, t, r) { return a(u(e), e.nextSibling, t, r); } function De(e, t, r) { m(e); return u(e).removeChild(e); } function Ue(e, t, r) { var n = e.firstChild; a(e, n, t, r); if (n) { while (n.nextSibling) { m(n.nextSibling); e.removeChild(n.nextSibling); } m(n); e.removeChild(n); } } function Be(e, t, r) { var n = r || ne(e, 'hx-select'); if (n) { var i = re().createDocumentFragment(); oe(t.querySelectorAll(n), function (e) { i.appendChild(e); }); t = i; } return t; } function Fe(e, t, r, n, i) { switch (e) { case 'none': return; case 'outerHTML': Ie(r, n, i); return; case 'afterbegin': ke(r, n, i); return; case 'beforebegin': Pe(r, n, i); return; case 'beforeend': Me(r, n, i); return; case 'afterend': Xe(r, n, i); return; case 'delete': De(r, n, i); return; default: var a = Fr(t); for (var o = 0; o < a.length; o++) { var s = a[o]; try { var l = s.handleSwap(e, r, n, i); if (l) { if (typeof l.length !== 'undefined') { for (var u = 0; u < l.length; u++) { var f = l[u]; if (f.nodeType !== Node.TEXT_NODE && f.nodeType !== Node.COMMENT_NODE) { i.tasks.push(Oe(f)); } } } return; } } catch (e) { b(e); } } if (e === 'innerHTML') { Ue(r, n, i); } else { Fe(Q.config.defaultSwapStyle, t, r, n, i); } } } function Ve(e) { if (e.indexOf('<title') > -1) { var t = e.replace(H, ''); var r = t.match(q); if (r) { return r[2]; } } } function je(e, t, r, n, i, a) { i.title = Ve(n); var o = l(n); if (o) { Ce(r, o, i); o = Be(r, o, a); Re(o); return Fe(e, r, t, o, i); } } function _e(e, t, r) { var n = e.getResponseHeader(t); if (n.indexOf('{') === 0) { var i = E(n); for (var a in i) { if (i.hasOwnProperty(a)) { var o = i[a]; if (!P(o)) { o = { value: o }; } ce(r, a, o); } } } else { var s = n.split(','); for (var l = 0; l < s.length; l++) { ce(r, s[l].trim(), []); } } } var ze = /\s/; var x = /[\s,]/; var $e = /[_$a-zA-Z]/; var We = /[_$a-zA-Z0-9]/; var Ge = ['"', "'", '/']; var Je = /[^\s]/; var Ze = /[{(]/; var Ke = /[})]/; function Ye(e) { var t = []; var r = 0; while (r < e.length) { if ($e.exec(e.charAt(r))) { var n = r; while (We.exec(e.charAt(r + 1))) { r++; } t.push(e.substr(n, r - n + 1)); } else if (Ge.indexOf(e.charAt(r)) !== -1) { var i = e.charAt(r); var n = r; r++; while (r < e.length && e.charAt(r) !== i) { if (e.charAt(r) === '\\') { r++; } r++; } t.push(e.substr(n, r - n + 1)); } else { var a = e.charAt(r); t.push(a); } r++; } return t; } function Qe(e, t, r) { return ( $e.exec(e.charAt(0)) && e !== 'true' && e !== 'false' && e !== 'this' && e !== r && t !== '.' ); } function et(e, t, r) { if (t[0] === '[') { t.shift(); var n = 1; var i = ' return (function(' + r + '){ return ('; var a = null; while (t.length > 0) { var o = t[0]; if (o === ']') { n--; if (n === 0) { if (a === null) { i = i + 'true'; } t.shift(); i += ')})'; try { var s = Tr( e, function () { return Function(i)(); }, function () { return true; } ); s.source = i; return s; } catch (e) { fe(re().body, 'htmx:syntax:error', { error: e, source: i }); return null; } } } else if (o === '[') { n++; } if (Qe(o, a, r)) { i += '((' + r + '.' + o + ') ? (' + r + '.' + o + ') : (window.' + o + '))'; } else { i = i + o; } a = t.shift(); } } } function y(e, t) { var r = ''; while (e.length > 0 && !t.test(e[0])) { r += e.shift(); } return r; } function tt(e) { var t; if (e.length > 0 && Ze.test(e[0])) { e.shift(); t = y(e, Ke).trim(); e.shift(); } else { t = y(e, x); } return t; } var rt = 'input, textarea, select'; function nt(e, t, r) { var n = []; var i = Ye(t); do { y(i, Je); var a = i.length; var o = y(i, /[,\[\s]/); if (o !== '') { if (o === 'every') { var s = { trigger: 'every' }; y(i, Je); s.pollInterval = d(y(i, /[,\[\s]/)); y(i, Je); var l = et(e, i, 'event'); if (l) { s.eventFilter = l; } n.push(s); } else if (o.indexOf('sse:') === 0) { n.push({ trigger: 'sse', sseEvent: o.substr(4) }); } else { var u = { trigger: o }; var l = et(e, i, 'event'); if (l) { u.eventFilter = l; } while (i.length > 0 && i[0] !== ',') { y(i, Je); var f = i.shift(); if (f === 'changed') { u.changed = true; } else if (f === 'once') { u.once = true; } else if (f === 'consume') { u.consume = true; } else if (f === 'delay' && i[0] === ':') { i.shift(); u.delay = d(y(i, x)); } else if (f === 'from' and etc... )

